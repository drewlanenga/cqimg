// Generated by CoffeeScript 1.6.3
var app, bodyParser, chartConfig, charts, express, fs, server;

fs = require("fs");

express = require("express");

bodyParser = require("body-parser");

charts = require("./charts");

app = express();

app.use(bodyParser.json());

chartConfig = {
  w: 800,
  h: 450,
  padding: 20,
  selector: "#chart"
};

app.route('/:chart').get(function(req, res) {
  var chart, id, output, params, pngfile, svgfile;
  chart = req.params.chart;
  if (req.query.data == null) {
    res.status(500).end();
    return;
  }
  if (req.query.w != null) {
    chartConfig.w = parseInt(req.query.w);
  }
  if (req.query.h != null) {
    chartConfig.h = parseInt(req.query.h);
  }
  if (req.query.padding != null) {
    chartConfig.padding = parseInt(req.query.padding);
  }
  params = {
    dpi: 1.0,
    includeHeader: false,
    includeFooter: false,
    includeBumpers: false,
    startDate: "2001-01-01",
    endDate: "2001-01-02",
    title: "Title",
    subtitle: "Subtitle"
  };
  if (req.query.retina != null) {
    if (req.query.retina) {
      params.dpi = 2.0;
    }
  }
  if (req.query.title != null) {
    params.title = req.query.title;
  }
  if (req.query.subTitle != null) {
    params.title = req.query.subTitle;
  }
  if (req.query.includeHeader != null) {
    params.includeHeader = !!req.query.includeHeader;
  }
  if (req.query.includeFooter != null) {
    params.includeFooter = !!req.query.includeFooter;
  }
  if (req.query.includeBumpers != null) {
    params.includeBumpers = !!req.query.includeBumpers;
  }
  if (req.query.startDate != null) {
    params.startDate = req.query.startDate;
  }
  if (req.query.endDate != null) {
    params.endDate = req.query.endDate;
  }
  chartConfig.chartData = JSON.parse(req.query.data);
  output = charts.draw(chartConfig, charts[chart], params);
  id = charts.random(5);
  svgfile = "" + id + ".svg";
  pngfile = "" + id + ".png";
  return charts.write(output, svgfile, pngfile, params.dpi, function(err) {
    var options;
    if (err) {
      console.log({
        fun: "charts.write",
        err: err
      });
      res.status(500).end();
      return;
    }
    options = {
      root: __dirname + '/../'
    };
    return res.sendFile(pngfile, options, function(err) {
      if (err) {
        console.log({
          fun: "res.sendFile",
          err: err
        });
        res.status(500).end();
        return;
      }
      fs.unlink(svgfile, function(err) {
        return console.log('deleting svg', err);
      });
      fs.unlink(pngfile, function(err) {
        return console.log('deleting png', err);
      });
      console.log("total success");
    });
  });
});

server = app.listen(3000, function() {
  var host, port;
  host = server.address().address;
  port = server.address().port;
  return console.log('Example app listening at http://%s:%s', host, port);
});
